// _sass/_grid.scss

// =============================================================================
// IM GRID UTILITIES
// =============================================================================
// Provides utility classes to apply configurable grid line effects to elements.
//
// Requires $im-grid-line-width to be defined (e.g., in _variables.scss)
// Requires CSS Custom Properties for colors (e.g., --im-color-primary, --im-color-border)
//
// Usage:
// <div class="box im-has-grid is-grid-small is-grid-primary">...</div>
// <div class="card im-has-grid is-grid-medium is-grid-light is-grid-fade-tight">...</div>
// =============================================================================

// --- Default Grid Variables (can be overridden by modifier classes) ---
$im-grid-default-spacing: 30px !default;
$im-grid-default-line-width: 1px !default; // Matches your $im-grid-line-width
$im-grid-default-fade-extent: 65% !default; // Matches your $im-grid-fade-extent
$im-grid-default-color-var: '--im-color-border'; // Default line color (using border color)

// --- Base Grid Structure ---
.im-has-grid {
  position: relative; // Essential for absolute positioning of pseudo-element
  z-index: 0; // Ensure pseudo-element is behind content if element itself has no z-index

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    z-index: -1; // Behind the element's direct content, but respects element's z-index
    pointer-events: none;

    // Default values, will be overridden by modifiers
    --current-grid-spacing: #{$im-grid-default-spacing};
    --current-grid-line-width: #{$im-grid-default-line-width};
    --current-grid-fade-extent: #{$im-grid-default-fade-extent};
    --current-grid-line-color: var(#{$im-grid-default-color-var}); // Default to border color

    background-image:
      repeating-linear-gradient(
        to right,
        var(--current-grid-line-color) 0,
        var(--current-grid-line-color) var(--current-grid-line-width),
        transparent var(--current-grid-line-width),
        transparent var(--current-grid-spacing)
      ),
      repeating-linear-gradient(
        to bottom,
        var(--current-grid-line-color) 0,
        var(--current-grid-line-color) var(--current-grid-line-width),
        transparent var(--current-grid-line-width),
        transparent var(--current-grid-spacing)
      );
    background-size: var(--current-grid-spacing) var(--current-grid-spacing);
    background-position: center center; // Or top left if preferred

    mask-image: radial-gradient(ellipse at center, black 0%, black var(--current-grid-fade-extent), transparent 100%);
    -webkit-mask-image: radial-gradient(ellipse at center, black 0%, black var(--current-grid-fade-extent), transparent 100%);

    // To make it work with border-radius of the parent
    // Note: This might not be perfect for all border-radius values and might need adjustment
    // or for the parent to have overflow: hidden if the grid should be clipped.
    // If the parent .im-has-grid has a border-radius, this helps the pseudo-element conform.
    border-radius: inherit; // Inherit border-radius from the parent element
  }
}

// --- Grid Spacing Modifiers ---
.im-has-grid.is-grid-tiny {
  &::before { --current-grid-spacing: 10px; }
}
.im-has-grid.is-grid-small {
  &::before { --current-grid-spacing: 15px; }
}
.im-has-grid.is-grid-medium { // This will be the default if no size class is applied
  &::before { --current-grid-spacing: #{$im-grid-default-spacing}; } // Use default from variables
}
.im-has-grid.is-grid-large {
  &::before { --current-grid-spacing: 45px; }
}
.im-has-grid.is-grid-xlarge {
  &::before { --current-grid-spacing: 60px; }
}

// --- Grid Line Width Modifiers (Optional - usually 1px is fine) ---
.im-has-grid.is-grid-line-thin {
  &::before { --current-grid-line-width: 0.5px; }
}
.im-has-grid.is-grid-line-normal { // Default
  &::before { --current-grid-line-width: #{$im-grid-default-line-width}; }
}
.im-has-grid.is-grid-line-thick {
  &::before { --current-grid-line-width: 2px; }
}


// --- Grid Color Modifiers ---
// These assume you have these CSS custom properties defined in your :root
.im-has-grid.is-grid-primary {
  &::before { --current-grid-line-color: var(--im-color-primary); }
}
.im-has-grid.is-grid-primary-light { // More subtle primary
  &::before { --current-grid-line-color: rgba(var(--im-color-primary-rgb), 0.3); }
}
.im-has-grid.is-grid-light { // Good for dark backgrounds or subtle on light
  // Use a light color, e.g., a very transparent white or a light grey
  // This needs a CSS variable like --im-color-grid-on-dark defined in :root or html.im-is-dark-mode
  &::before { --current-grid-line-color: rgba(255, 255, 255, 0.1); } // Example for dark surfaces
  // If on a light surface and wanting light lines, it might be hard to see.
  // This class name implies light lines.
}
html.im-is-dark-mode .im-has-grid.is-grid-light::before {
    --current-grid-line-color: rgba(255, 255, 255, 0.08); // Even more subtle on dark mode for "light" grid
}

.im-has-grid.is-grid-dark { // Good for light backgrounds
  // Use a dark color, e.g., a very transparent black or dark grey
  &::before { --current-grid-line-color: rgba(0, 0, 0, 0.08); }
}
html.im-is-dark-mode .im-has-grid.is-grid-dark::before { // Dark lines on a dark background will be very subtle
    --current-grid-line-color: rgba(0, 0, 0, 0.15); // Might need to be lighter to be visible
}


.im-has-grid.is-grid-muted { // Uses the muted text color, often good for subtlety
  &::before { --current-grid-line-color: rgba(var(--im-color-text-muted-rgb, 113, 128, 150), 0.2); }
}
html.im-is-dark-mode .im-has-grid.is-grid-muted::before {
  &::before { --current-grid-line-color: rgba(var(--im-color-text-muted-rgb, 160, 174, 192), 0.15); }
}

.im-has-grid.is-grid-border { // Uses the standard border color
   &::before { --current-grid-line-color: var(--im-color-border); } // Default color is already this
}


// --- Grid Fade Extent Modifiers ---
.im-has-grid.is-grid-fade-none { // No fade, full grid
  &::before { mask-image: none; -webkit-mask-image: none; }
}
.im-has-grid.is-grid-fade-subtle {
  &::before { --current-grid-fade-extent: 85%; } // Fades out further from center
}
.im-has-grid.is-grid-fade-normal { // Default
  &::before { --current-grid-fade-extent: #{$im-grid-default-fade-extent}; }
}
.im-has-grid.is-grid-fade-tight {
  &::before { --current-grid-fade-extent: 45%; } // Fades out closer to center
}
.im-has-grid.is-grid-fade-edges { // Fades from edges inward (opposite of radial)
  &::before {
    mask-image: linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%),
                linear-gradient(to bottom, transparent 0%, black 20%, black 80%, transparent 100%);
    -webkit-mask-image: linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%),
                        linear-gradient(to bottom, transparent 0%, black 20%, black 80%, transparent 100%);
    mask-composite: intersect; // Or add, source-in etc. depending on desired effect
    -webkit-mask-composite: source-in; // Common for WebKit
  }
}

// --- Grid Style Modifiers (Example: Dotted - More Complex) ---
// This is harder to achieve perfectly with just repeating-linear-gradient for true dots.
// Using background-image with SVG or multiple gradients is more robust for patterns.
// For a simple dashed effect (not truly dotted):
.im-has-grid.is-grid-dashed {
  &::before {
    background-image:
      repeating-linear-gradient(
        to right,
        var(--current-grid-line-color) 0,
        var(--current-grid-line-color) calc(var(--current-grid-spacing) / 4), // Dash length
        transparent calc(var(--current-grid-spacing) / 4),          // Gap start
        transparent calc(var(--current-grid-spacing) / 2)           // Gap end, then repeat
      ),
      repeating-linear-gradient(
        to bottom,
        var(--current-grid-line-color) 0,
        var(--current-grid-line-color) calc(var(--current-grid-spacing) / 4),
        transparent calc(var(--current-grid-spacing) / 4),
        transparent calc(var(--current-grid-spacing) / 2)
      );
    // background-size needs to be adjusted for dashed patterns effectively
    // This simple dash might not align perfectly at intersections.
  }
}